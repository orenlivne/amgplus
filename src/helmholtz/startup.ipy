%reload_ext autoreload
%autoreload 2
from IPython.display import display_html

import collections
import itertools
import numpy as np
import pandas as pd
import scipy.sparse
from scipy.linalg import eig, norm, svd
from scipy.sparse.linalg import eigs
from scipy import optimize
import logging
import sys

try:
    import matplotlib.pyplot as plt
except ImportError:
    pass

np.set_printoptions(linewidth=500, precision=3, suppress=True, threshold=100000)
for handler in logging.root.handlers[:]: logging.root.removeHandler(handler)
logging.basicConfig(stream=sys.stdout, level=logging.INFO, format="%(levelname)-8s %(message)s",
                    datefmt="%a, %d %b %Y %H:%M:%S")

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
pd.options.display.float_format = "{:,.4f}".format

logger = logging.getLogger("main")
_LOGGER = logger


def display_df_side_by_side(a, b, captions):
    # Calculate two-level cycle convergence rate vs. domain size.
    a_styler = a.style.set_table_attributes("style='display:inline'").set_caption(captions[0]).format(precision=2)
    b_styler = b.style.set_table_attributes("style='display:inline'").set_caption(captions[1]).format(precision=2)
    display_html(a_styler._repr_html_()+b_styler._repr_html_(), raw=True)

import helmholtz as hm
import helmholtz.analysis
import helmholtz.repetitive.coarsening_repetitive as hrc
import helmholtz.analysis.plots
import helmholtz.analysis.stats
